{"author":"Open Zeppelin","title":"Safe Math Operations","fileName":"/contracts/SafeMath.sol","name":"SafeMath","abi":[],"opcodes":"PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x0 JUMPI JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x16 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE JUMPDEST PUSH1 0x0 JUMP STOP LOG1 PUSH6 0x627A7A723058 SHA3 RETURN 0x4b 0xc2 0x2d SWAP2 CALLVALUE SWAP8 DUP4 0x1e EXTCODECOPY PUSH20 0xB7CFB4316939AFDDBAC525099CC05C5D272489B6 0x1b STOP 0x29 ","source":"pragma solidity ^0.4.8;\n\n/// @title Safe Math Operations\n/// @author Open Zeppelin\n\nlibrary SafeMath {\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n}\n","abiDocs":[]}
